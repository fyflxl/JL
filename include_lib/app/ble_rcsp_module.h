// binary representation
// attribute size in bytes (16), flags(16), handle (16), uuid (16/128), value(...)

#ifndef _BLE_RCSP_MODULE_H
#define _BLE_RCSP_MODULE_H

#include <stdint.h>
#include "bt_common.h"
#include "ble_user.h"
#include "btstack/btstack_typedef.h"
#include "Ohrdrive.h"

#if TCFG_PAY_ALIOS_ENABLE
#define  UPAY_ONE_PROFILE          1  //同一个pofile
#else
#define  UPAY_ONE_PROFILE          0
#endif

#if (TCFG_BLE_DEMO_SELECT == DEF_BLE_DEMO_RCSP_DEMO)
//
// gatt profile include file, generated by jieli gatt_inc_generator.exe
//

static const uint8_t profile_data[] = {
    //////////////////////////////////////////////////////
    //
    // 0x0001 PRIMARY_SERVICE  1800
    //
    //////////////////////////////////////////////////////
    0x0a, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x28, 0x00, 0x18,

     /* CHARACTERISTIC,  2a00, READ | WRITE | DYNAMIC, */
    // 0x0002 CHARACTERISTIC 2a00 READ | WRITE | DYNAMIC 
    0x0d, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x28, 0x0a, 0x03, 0x00, 0x00, 0x2a,
    // 0x0003 VALUE 2a00 READ | WRITE | DYNAMIC  
    0x08, 0x00, 0x0a, 0x01, 0x03, 0x00, 0x00, 0x2a,

    //////////////////////////////////////////////////////
    //
    // 0x0004 PRIMARY_SERVICE  180a
    //
    //////////////////////////////////////////////////////
    0x0a, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x28, 0x0a, 0x18,

     /* CHARACTERISTIC,  2a27, READ | DYNAMIC, */
    // 0x0005 CHARACTERISTIC 2a27 READ | DYNAMIC 
    0x0d, 0x00, 0x02, 0x00, 0x05, 0x00, 0x03, 0x28, 0x02, 0x06, 0x00, 0x27, 0x2a,
    // 0x0006 VALUE 2a27 READ | DYNAMIC  
    0x08, 0x00, 0x02, 0x01, 0x06, 0x00, 0x27, 0x2a,

     /* CHARACTERISTIC,  2a28, READ | DYNAMIC, */
    // 0x0007 CHARACTERISTIC 2a28 READ | DYNAMIC 
    0x0d, 0x00, 0x02, 0x00, 0x07, 0x00, 0x03, 0x28, 0x02, 0x08, 0x00, 0x28, 0x2a,
    // 0x0008 VALUE 2a28 READ | DYNAMIC  
    0x08, 0x00, 0x02, 0x01, 0x08, 0x00, 0x28, 0x2a,

    //////////////////////////////////////////////////////
    //
    // 0x0009 PRIMARY_SERVICE  1814
    //
    //////////////////////////////////////////////////////
    0x0a, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x28, 0x14, 0x18,

     /* CHARACTERISTIC,  2a53, NOTIFY, */
    // 0x000a CHARACTERISTIC 2a53 NOTIFY 
    0x0d, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x03, 0x28, 0x10, 0x0b, 0x00, 0x53, 0x2a,
    // 0x000b VALUE 2a53 NOTIFY  
    0x08, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x53, 0x2a,
    // 0x000c CLIENT_CHARACTERISTIC_CONFIGURATION 
    0x0a, 0x00, 0x0a, 0x01, 0x0c, 0x00, 0x02, 0x29, 0x00, 0x00,

     /* CHARACTERISTIC,  2a54, READ | DYNAMIC, */
    // 0x000d CHARACTERISTIC 2a54 READ | DYNAMIC 
    0x0d, 0x00, 0x02, 0x00, 0x0d, 0x00, 0x03, 0x28, 0x02, 0x0e, 0x00, 0x54, 0x2a,
    // 0x000e VALUE 2a54 READ | DYNAMIC  
    0x08, 0x00, 0x02, 0x01, 0x0e, 0x00, 0x54, 0x2a,

    //////////////////////////////////////////////////////
    //
    // 0x000f PRIMARY_SERVICE  180d
    //
    //////////////////////////////////////////////////////
    0x0a, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x28, 0x0d, 0x18,

     /* CHARACTERISTIC,  2a37,  NOTIFY, */
    // 0x0010 CHARACTERISTIC 2a37 NOTIFY 
    0x0d, 0x00, 0x02, 0x00, 0x10, 0x00, 0x03, 0x28, 0x10, 0x11, 0x00, 0x37, 0x2a,
    // 0x0011 VALUE 2a37 NOTIFY  
    0x08, 0x00, 0x10, 0x00, 0x11, 0x00, 0x37, 0x2a,
    // 0x0012 CLIENT_CHARACTERISTIC_CONFIGURATION 
    0x0a, 0x00, 0x0a, 0x01, 0x12, 0x00, 0x02, 0x29, 0x00, 0x00,


    //////////////////////////////////////////////////////
    //
    // 0x0080 PRIMARY_SERVICE  ae3a
    //
    //////////////////////////////////////////////////////
    0x0a, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x28, 0x3a, 0xae,

     /* CHARACTERISTIC,  ae3b, WRITE_WITHOUT_RESPONSE | DYNAMIC, */
    // 0x0081 CHARACTERISTIC ae3b WRITE_WITHOUT_RESPONSE | DYNAMIC 
    0x0d, 0x00, 0x02, 0x00, 0x81, 0x00, 0x03, 0x28, 0x04, 0x82, 0x00, 0x3b, 0xae,
    // 0x0082 VALUE ae3b WRITE_WITHOUT_RESPONSE | DYNAMIC  
    0x08, 0x00, 0x04, 0x01, 0x82, 0x00, 0x3b, 0xae,

     /* CHARACTERISTIC,  ae3c, NOTIFY, */
    // 0x0083 CHARACTERISTIC ae3c NOTIFY 
    0x0d, 0x00, 0x02, 0x00, 0x83, 0x00, 0x03, 0x28, 0x10, 0x84, 0x00, 0x3c, 0xae,
    // 0x0084 VALUE ae3c NOTIFY  
    0x08, 0x00, 0x10, 0x00, 0x84, 0x00, 0x3c, 0xae,
    // 0x0085 CLIENT_CHARACTERISTIC_CONFIGURATION 
    0x0a, 0x00, 0x0a, 0x01, 0x85, 0x00, 0x02, 0x29, 0x00, 0x00,

    // END
    0x00, 0x00, 
}; 
//
// characteristics <--> handles
//
#define ATT_CHARACTERISTIC_2a00_01_VALUE_HANDLE 0x0003
#define ATT_CHARACTERISTIC_2a27_01_VALUE_HANDLE 0x0006
#define ATT_CHARACTERISTIC_2a28_01_VALUE_HANDLE 0x0008
#define ATT_CHARACTERISTIC_2a53_01_VALUE_HANDLE 0x000b
#define ATT_CHARACTERISTIC_2a53_01_CLIENT_CONFIGURATION_HANDLE 0x000c
#define ATT_CHARACTERISTIC_2a54_01_VALUE_HANDLE 0x000e
#define ATT_CHARACTERISTIC_2a37_01_VALUE_HANDLE 0x0011
#define ATT_CHARACTERISTIC_2a37_01_CLIENT_CONFIGURATION_HANDLE 0x0012
#define ATT_CHARACTERISTIC_ae3b_01_VALUE_HANDLE 0x0082
#define ATT_CHARACTERISTIC_ae3c_01_VALUE_HANDLE 0x0084
#define ATT_CHARACTERISTIC_ae3c_01_CLIENT_CONFIGURATION_HANDLE 0x0085

#define RSCS_FLAG 01  //walking pacce

//===========================================================================================
//JL_CMD_send(JL_OPCODE_ADV_DEVICE_NOTIFY, buf, len, JL_NOT_NEED_RESPOND)
#define JL_OPCODE_SET_ADV 							    0xC0
#define	JL_OPCODE_GET_ADV  								0xC1
#define JL_OPCODE_ADV_DEVICE_NOTIFY 					0xC2
#define JL_OPCODE_ADV_NOTIFY_SETTING 					0xC3
#define JL_OPCODE_ADV_DEVICE_REQUEST					0xC4

#define ATTR_TYPE_BAT_VALUE  			(0)
#define ATTR_TYPE_EDR_NAME   			(1)
#define ATTR_TYPE_KEY_SETTING  			(2)
#define ATTR_TYPE_LED_SETTING  			(3)
#define ATTR_TYPE_MIC_SETTING  			(4)
#define ATTR_TYPE_WORK_MODE  			(5)
#define ATTR_TYPE_PRODUCT_MESSAGE  		(6)
#define ATTR_TYPE_TIME_STAMP			(7)
#define ATTR_TYPE_EQ_SETTING			(8)
#define ATTR_TYPE_HIGH_LOW_VOL			(9)
#if JL_EARPHONE_APP_EN
#define ATTR_TYPE_ANC_VOICE_KEY		    (10)
#define ATTR_TYPE_ANC_VOICE			    (11)
#define ATTR_TYPE_ASSISTED_HEARING	    (12)
#else
#define ATTR_TYPE_VOL_SETTING			(10)
#define ATTR_TYPE_MISC_SETTING			(11)
#define ATTR_TYPE_COLOR_LED_SETTING 	(12)
#define ATTR_TYPE_KARAOKE_EQ_SETTING	(13)
#define ATTR_TYPE_KARAOKE_SETTING		(64)//(14)
#endif


enum {
    BT_ADV_ENABLE,
    BT_ADV_DISABLE,
    BT_ADV_SET_EDR_CON_FLAG,
    BT_ADV_SET_BAT_CHARGE_L,
    BT_ADV_SET_BAT_CHARGE_R,
    BT_ADV_SET_BAT_CHARGE_C,
    BT_ADV_SET_BAT_PERCENT_L,
    BT_ADV_SET_BAT_PERCENT_R,
    BT_ADV_SET_BAT_PERCENT_C,
    BT_ADV_SET_NOTIFY_EN,
};

// BT_ADV_SET_EDR_CON_FLAG
#define SECNE_DISMISS			(0x00)
#define SECNE_UNCONNECTED		(0x01)
#define SECNE_CONNECTED			(0x02)
#define SECNE_CONNECTING		(0x03)
#define SECNE_CONNECTINLESS		(0x04)

#define TWS_FUNC_ID_SEQ_RAND_SYNC	(('S' << (3 * 8)) | ('E' << (2 * 8)) | ('Q' << (1 * 8)) | ('\0'))

enum {
    TWS_ADV_SEQ_CHANGE = 0,
    TWS_VERSON_INFO,
    TWS_UPDATE_INFO,
};

void bt_ble_init(void);
void bt_ble_exit(void);
int rcsp_set_adv_enable(void *priv, u32 en);
void bt_ble_adv_enable(u8 enable);
void ble_module_enable(u8 en);

extern int  bt_ble_adv_ioctl(u32 cmd, u32 priv, u8 mode);
extern void bt_adv_seq_change(void);
void ble_app_disconnect(void);
void ble_profile_again_init(u8 enable);
u8 get_connect_flag(void);
void set_connect_flag(u8 value);
hci_con_handle_t rcsp_get_con_handle(void);
ble_state_e rcsp_get_ble_work_state(void);

void notify_update_connect_parameter(u8 table_index);
//added by helena for test
void ble_rcsp_test_pro(void);
void ble_send_heart_data(type_OHRL_output* DATAbuf);
void ble_send_pedo_data(type_PedoSummary* buff);
uint8_t rcsp_Is_work_state_connected(void);

#endif // (TCFG_BLE_DEMO_SELECT == DEF_BLE_DEMO_RCSP_DEMO)
#endif // _BLE_RCSP_MODULE_H
